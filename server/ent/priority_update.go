// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/ent/predicate"
	"server/ent/priority"
	"server/ent/todo"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PriorityUpdate is the builder for updating Priority entities.
type PriorityUpdate struct {
	config
	hooks    []Hook
	mutation *PriorityMutation
}

// Where appends a list predicates to the PriorityUpdate builder.
func (pu *PriorityUpdate) Where(ps ...predicate.Priority) *PriorityUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PriorityUpdate) SetName(s string) *PriorityUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PriorityUpdate) SetNillableName(s *string) *PriorityUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// AddTodoIDs adds the "todos" edge to the Todo entity by IDs.
func (pu *PriorityUpdate) AddTodoIDs(ids ...string) *PriorityUpdate {
	pu.mutation.AddTodoIDs(ids...)
	return pu
}

// AddTodos adds the "todos" edges to the Todo entity.
func (pu *PriorityUpdate) AddTodos(t ...*Todo) *PriorityUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddTodoIDs(ids...)
}

// Mutation returns the PriorityMutation object of the builder.
func (pu *PriorityUpdate) Mutation() *PriorityMutation {
	return pu.mutation
}

// ClearTodos clears all "todos" edges to the Todo entity.
func (pu *PriorityUpdate) ClearTodos() *PriorityUpdate {
	pu.mutation.ClearTodos()
	return pu
}

// RemoveTodoIDs removes the "todos" edge to Todo entities by IDs.
func (pu *PriorityUpdate) RemoveTodoIDs(ids ...string) *PriorityUpdate {
	pu.mutation.RemoveTodoIDs(ids...)
	return pu
}

// RemoveTodos removes "todos" edges to Todo entities.
func (pu *PriorityUpdate) RemoveTodos(t ...*Todo) *PriorityUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemoveTodoIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PriorityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PriorityUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PriorityUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PriorityUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PriorityUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := priority.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Priority.name": %w`, err)}
		}
	}
	return nil
}

func (pu *PriorityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(priority.Table, priority.Columns, sqlgraph.NewFieldSpec(priority.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(priority.FieldName, field.TypeString, value)
	}
	if pu.mutation.TodosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   priority.TodosTable,
			Columns: priority.TodosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedTodosIDs(); len(nodes) > 0 && !pu.mutation.TodosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   priority.TodosTable,
			Columns: priority.TodosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TodosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   priority.TodosTable,
			Columns: priority.TodosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{priority.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PriorityUpdateOne is the builder for updating a single Priority entity.
type PriorityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PriorityMutation
}

// SetName sets the "name" field.
func (puo *PriorityUpdateOne) SetName(s string) *PriorityUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PriorityUpdateOne) SetNillableName(s *string) *PriorityUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// AddTodoIDs adds the "todos" edge to the Todo entity by IDs.
func (puo *PriorityUpdateOne) AddTodoIDs(ids ...string) *PriorityUpdateOne {
	puo.mutation.AddTodoIDs(ids...)
	return puo
}

// AddTodos adds the "todos" edges to the Todo entity.
func (puo *PriorityUpdateOne) AddTodos(t ...*Todo) *PriorityUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddTodoIDs(ids...)
}

// Mutation returns the PriorityMutation object of the builder.
func (puo *PriorityUpdateOne) Mutation() *PriorityMutation {
	return puo.mutation
}

// ClearTodos clears all "todos" edges to the Todo entity.
func (puo *PriorityUpdateOne) ClearTodos() *PriorityUpdateOne {
	puo.mutation.ClearTodos()
	return puo
}

// RemoveTodoIDs removes the "todos" edge to Todo entities by IDs.
func (puo *PriorityUpdateOne) RemoveTodoIDs(ids ...string) *PriorityUpdateOne {
	puo.mutation.RemoveTodoIDs(ids...)
	return puo
}

// RemoveTodos removes "todos" edges to Todo entities.
func (puo *PriorityUpdateOne) RemoveTodos(t ...*Todo) *PriorityUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemoveTodoIDs(ids...)
}

// Where appends a list predicates to the PriorityUpdate builder.
func (puo *PriorityUpdateOne) Where(ps ...predicate.Priority) *PriorityUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PriorityUpdateOne) Select(field string, fields ...string) *PriorityUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Priority entity.
func (puo *PriorityUpdateOne) Save(ctx context.Context) (*Priority, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PriorityUpdateOne) SaveX(ctx context.Context) *Priority {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PriorityUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PriorityUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PriorityUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := priority.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Priority.name": %w`, err)}
		}
	}
	return nil
}

func (puo *PriorityUpdateOne) sqlSave(ctx context.Context) (_node *Priority, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(priority.Table, priority.Columns, sqlgraph.NewFieldSpec(priority.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Priority.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, priority.FieldID)
		for _, f := range fields {
			if !priority.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != priority.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(priority.FieldName, field.TypeString, value)
	}
	if puo.mutation.TodosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   priority.TodosTable,
			Columns: priority.TodosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedTodosIDs(); len(nodes) > 0 && !puo.mutation.TodosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   priority.TodosTable,
			Columns: priority.TodosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TodosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   priority.TodosTable,
			Columns: priority.TodosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(todo.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Priority{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{priority.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
