// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"net/http"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// TodosGetParams is parameters of GET /todos operation.
type TodosGetParams struct {
	// The number of items to return.
	Limit OptInt
	// The number of items to skip before starting to collect the result set.
	Offset   OptInt
	LabelIDs []int
	// Criteria to filter todo items.
	PriorityID OptInt
	// Criteria to filter todo items.
	StatusID OptInt
	// Criteria to filter todo items.
	Title OptString
	// Criteria to filter todo items.
	Description OptString
}

func unpackTodosGetParams(packed middleware.Parameters) (params TodosGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "labelIDs",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.LabelIDs = v.([]int)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "priorityID",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PriorityID = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "statusID",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.StatusID = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "title",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Title = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "description",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Description = v.(OptString)
		}
	}
	return params
}

func decodeTodosGetParams(args [0]string, argsEscaped bool, r *http.Request) (params TodosGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Offset.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           0,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: labelIDs.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "labelIDs",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotLabelIDsVal int
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToInt(val)
						if err != nil {
							return err
						}

						paramsDotLabelIDsVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.LabelIDs = append(params.LabelIDs, paramsDotLabelIDsVal)
					return nil
				})
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "labelIDs",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: priorityID.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "priorityID",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPriorityIDVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPriorityIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PriorityID.SetTo(paramsDotPriorityIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "priorityID",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: statusID.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "statusID",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStatusIDVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotStatusIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.StatusID.SetTo(paramsDotStatusIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "statusID",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: title.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "title",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTitleVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTitleVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Title.SetTo(paramsDotTitleVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "title",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: description.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "description",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDescriptionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDescriptionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Description.SetTo(paramsDotDescriptionVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "description",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
